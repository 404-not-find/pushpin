Pushpin
-------
Date: March 21st, 2013
Author: Justin Karneges <justin@fanout.io>

Read: http://blog.fanout.io/2013/02/10/http-grip-proxy-hold-technique/

Pushpin is a server component that provides realtime data push over HTTP. Web
applications that need HTTP long-polling or HTTP streaming interfaces simply
place Pushpin in front on the network path, in much the same way a load
balancer might be placed in front. Pushpin takes care of wrangling the
long-lived client connections, and it communicates with the application using
normal request and response HTTP. This means the backend web application can
be written in any language and use any webserver.

Additionally, Pushpin does all of this without exposing a proprietary protocol
to clients. The HTTP content between the client and your server is whatever
you want it to be. This makes it ideal for writing APIs.

License:

  - Pushpin is offered under the GNU AGPL. See the COPYING file.

Features:

  - Implement any realtime HTTP API using any webserver for the logic
  - Proxied requests are streamed, so non-realtime requests remain unhindered
  - Fault tolerant dual-process design reduces risk if things go wrong
  - Handle thousands of simultaneous connections (thanks to Mongrel2)

Requirements:

  qt >= 4.7
  libzmq >= 2.0
  qjson
  mongrel2
  zurl
  python
  python setproctitle
  python tnetstring
  python zmq

If accessing from Git, be sure to pull submodules:

  git submodule init
  git submodule update

Build:

  cd proxy
  ./configure
  make
  cd ..

Run:

  runner/pushpin-runner --config=pushpin.conf.example

  Pushpin consists of 4 processes: mongrel2, zurl, pushpin-proxy, and
  pushpin-handler. Pushpin-runner launches them all in one shot.

  If you'd prefer to individually manage any of these processes yourself, then
  adjust the "services" field in pushpin.conf. You can even choose to not use
  the runner at all. In that case, Pushpin's own processes can be launched
  as follows:

  Proxy process:
    proxy/pushpin-proxy --verbose --config=pushpin.conf.example

  Handler process:
    handler/pushpin-handler --config=pushpin.conf.example

Test:

  By default, Pushpin listens on port 7999 and forwards to localhost port 80.
  If you've got a webserver running on port 80, you can confirm that proxying
  works by browsing to http://localhost:7999/

Architecture:

  +-----------------+
  | Web application |
  +-----------------+
    /|\          |
     |  HTTP     |
    \|/          |
  +------+       |
  | Zurl |       | HTTP
  +------+       |
    /|\          |
     |  ZeroMQ   |
    \|/         \|/
  +-----------------+
  |     Pushpin     |
  +-----------------+
    /|\
     |  ZeroMQ
    \|/
  +----------+
  | Mongrel2 |
  +----------+
    /|\
     |  HTTP
    \|/
  +--------+
  | Client |
  +--------+

