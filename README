Pushpin
-------
Date: December 11th, 2012
Author: Justin Karneges <justin@fanout.io>

Pushpin is a server component that provides realtime data push over HTTP. Web
applications that need HTTP long-polling or HTTP streaming interfaces simply
place Pushpin in front on the network path, in much the same way a load
balancer might be placed in front. Pushpin takes care of wrangling the
long-lived client connections, and it communicates with the application using
normal request and response HTTP. This means the backend web application can
be written in any language and use any webserver.

Additionally, Pushpin does all of this without exposing a proprietary protocol
to clients. The HTTP content between the client and your server is whatever
you want it to be. This makes it ideal for writing APIs.

License:

  - Pushpin is offered under the GNU AGPL. See the COPYING file.

Features:

  - Implement any realtime HTTP API using any webserver for the logic
  - Proxied requests are streamed, so non-realtime requests remain unhindered
  - Fault tolerant dual-process design reduces risk if things go wrong
  - Handle thousands of simultaneous connections (thanks to Mongrel2)

Requirements:

  qt >= 4.7
  libzmq >= 2.0
  qjson
  mongrel2
  zurl
  python
  python tnetstring
  python zmq

If accessing from Git, be sure to pull submodules:

  git submodule init
  git submodule update

Build:

  cd proxy
  ./configure
  make
  cd ..

Run:

  There are two processes.

  Proxy process:
    proxy/pushpin-proxy --verbose --config=pushpin.conf.example

  Handler process:
    python handler/pushpin-handler.py --config=pushpin.conf.example

Architecture:

  +-----------------+
  | Web application |
  +-----------------+
    /|\          |
     |  HTTP     |
    \|/          |
  +------+       |
  | Zurl |       | HTTP
  +------+       |
    /|\          |
     |  ZeroMQ   |
    \|/         \|/
  +-----------------+
  |     Pushpin     |
  +-----------------+
    /|\
     |  ZeroMQ
    \|/
  +----------+
  | Mongrel2 |
  +----------+
    /|\
     |  HTTP
    \|/
  +--------+
  | Client |
  +--------+

